Q1.
The three gestures used in base Rock Paper Scissors are rock, paper, 
and scissors. The way these are scored is as such: Rock beats Scissors, 
Scissors beats Paper, Paper beats Rock. It gets a lot more complicated 
when you introduce new gestures, but let's keep it simple for now.
We're definitely going to need a way to decide who has won and who has lost, or 
whether the round has ended in a draw. Using the rules provided, give us an 
engine for deciding this based on the player's moves.
Rock Beats Scissors
As a player, I want rock to beat scissors. So that I can play with rules 
I'm familiar with.
 Given I have chosen rock
When the opponent chooses scissors
Then I should win.
 Given I have chosen scissors
When the opponent chooses rock
Then they should win
Scissors Beats Paper
As a player, I want scissors to beat paper. So that I can play with rules 
I'm familiar with.
 Given I have chosen scissors
When the opponent chooses paper
Then I should win.
 Given I have chosen paper
When the opponent chooses scissors
Then they should win.
Paper Beats Rock
As a player, I want paper to beat rock. So that I can play with rules I'm 
familiar with.
 Given I have chosen paper
When the opponent chooses rock
Then I should win.
 Given I have chosen rock
When the opponent chooses paper
Then they should win.
Same move results in Draw
As a player, I want the same moves to draw. So that I can play with 
rules I'm familiar with.
 Given I have chosen rock
When the opponent chooses rock
Then it should be a draw.
 Given I have chosen paper
When the opponent chooses paper
Then it should be a draw.
 Given I have chosen scissors
When the opponent chooses scissors
Then it should be a draw.
Some rules to keep in mind
 In a Single file the developer needs to store the player’s name and the 
highest score
 Developer need to display the highest score when any person starts a new 
game
 If any player beats the highest score then his/her score should be updated 
as the highest score for the game
 The score cannot be in negative value and the file in which developer is 
storing user’s data should provide the information when it is required to be 
fetched and if not able to find then proper handling of this scenario should 
be there
 Until and unless user wants to quit the game the playing option should be 
available

#######slotion########
code:-
   #include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define rounds 4 //pre-defining the total number of rounds for the game
static int userScore = 0;
static int computerScore = 0;
static int machine;
static char user;
char properInput()//returns only the first character given input as the choice
 {
   char c=getchar();
   if(c>='A'&&c<='Z')c = c - 'A' + 'a';//converting the uppercase into lowercase
   while(getchar()!='\n');//ignoring all other characters given input till the user presses enter
   return c;
 }
char computerChoice()//returns a random choice for the computer for every round
 {
   srand(time(0));//this ensures that random numbers are generated according to the given time, hence providing variety every time
   machine = rand()%3;//this ensures that there are only three possible values: 0,1 and 2
  if(machine==0)return 'r';
  else if(machine==1)return 'p';
  else return 's';
 }
void userChoice()//takes input the choice of the user for every round
 {
  printf("\nInput your choice: ");
  user=properInput();
  while(user!='r' && user!= 'p' && user!='s'){
    printf("Invalid choice, re-input your choice: ");
    user=properInput();
  }
 }
void printRules()//prints the rules of the game
 {
  printf("Rock can beat scissors, paper can beat rock and scissors can beat paper");
  printf("\nInput r for rock, the p for paper and s for scissors");
 }
void game(int currentRound)//recursive function to execute the game for the pre-defined number of rounds
 {
  if(currentRound==rounds)return;//base case which allows complete exit from the function
  userChoice();
  char computer = computerChoice();
  if(computer=='r')printf("Machine played rock. ");
  else if(computer=='p')printf("Machine played paper. ");
  else printf("Machine played scissors. ");
  if(user==computer)
  {
    printf("The round is a draw.\n");
  }
  else if(user=='r' && computer=='s' || user=='p' && computer=='r' || user=='s' && computer=='p')
  {
    printf("You win this round.\n");
    userScore++;
  }
  else
  {
    printf("You lose this round.\n");
    computerScore++;
  }
  game(++currentRound);//starting the next round
 }
void result()//prints the outcome of all the rounds
{
  printf("You scored %d and the system scored %d, ",userScore,computerScore);
  if(userScore==computerScore)printf("it is a draw.\n");
  else if(userScore>computerScore)printf("you win.\n");
  else printf("you lose.\n");
}
int main()//calls the required functions to execute the program
{
  printf("There will be %d round(s).\n",rounds);
  printRules();
  game(0);
  result();
  return 0;
} 